#!/usr/bin/python -u
# coding=UTF8

#
# Copyright 2013 Leandro Dybal Bertoni - All Rights Reserved
#



###### -*- coding: utf8 -*-

import sys, re, string, commands, math
import db, conv, admin

debug=0
count_i=count_u=count_p=0
data = None
lin = 0 

ignorar = []
novos = []

if len(sys.argv) < 2:
	print "Uso:", sys.argv[0],"[-v] <arquivo a carregar>"
	sys.exit()
if sys.argv[1] == "-v":
	debug = 1
	nome_arq = sys.argv[2]
elif sys.argv[1] == "-vv":
	debug = 2
        nome_arq = sys.argv[2]
elif sys.argv[1] == "-vvv":
	debug = 3
        nome_arq = sys.argv[2]
else: nome_arq = sys.argv[1]


arquivo_log = admin.init("mcx")
programa_id = db.obtem_id_programa(debug, "mcx")
if not programa_id:
        print "PROBLEMAS!!: programa mcx não encontrado na base de dados!"
        # enviar email
        admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS!!: programa mcx não encontrado na base de dados!");


print "Tratando arquivo",nome_arq
try: 
	f = open(nome_arq)
except IOError, e:
	print "Não foi possível abrir arquivo",nome_arq,"(",e,")"
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "Não foi possível abrir arquivo"+nome_arq+"("+e+")")


def le_linha(arq):
	global lin
	lin = lin + 1
	linha = re.sub(r'\n$', "", arq.readline())
	if debug: print "("+str(lin)+"):", linha
	return linha


def trata_data(s):
	ts = re.match(r'(\d+) *([A-Za-z]+) *(\d+)', string.strip(s))
	if ts:
		return commands.getoutput("date -d \""+s+"\" +%F")
	else:
		ts = re.match(r'(\d{2})[-/](\d{2})[-/](\d{4})', string.strip(s))
		if ts:
			return ts.group(3)+"-"+ts.group(1)+"-"+ts.group(2)
		else:
			print "PROBLEMAS: data inválida:",s
			return None


# verificar linha de cabeçalho
line = le_linha(f)
if not re.match(r'Date,Commodity Symbol,Contract/Expiry Month,Open\(Rs\),High\(Rs\),Low\(Rs\),Close\(Rs\),PCP\(Rs\),Volume\(In Lots\),Volume\(In 000\'s\),Value\(In Lakhs\),OI\(In Lots\)', line):
	print "PROBLEMAS: Arquivo inválido, linha de cabeçalho não encontrada"
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS: Arquivo inválido, linha de cabeçalho não encontrada")


# Inicializar estrutura de moedas)
ret = db.carrega_moedas(0) 
if ret <= 2:
	print "PROBLEMA na carga de moedas, carregou", ret,"moedas!"
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMA na carga de moedas, carregou"+str(ret)+"moedas!")

# Inicializar estrutura de unidades
ret = db.carrega_unidades(0) 
if ret <= 2:
	print "!!!!! Problemas na carga de unidades, carregou", ret,"unidades!"
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMA na carga de unidades, carregou"+str(ret)+"unidades!")

line = le_linha(f)
# obter data do pregão
tline = re.match(r'^([^,]+),', line)
if tline:
	data = trata_data(tline.group(1))
	if not data:
		print "PROBLEMAS: data do pregão inválida:", tline.group(1)
		admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS: data do pregão inválida:"+tline.group(1))
	print "Pregão de",data
else:
	print "PROBLEMAS ao obter data do pregão da primeira linha de dados (deveria se o índice DHAANYA):"
	print line
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS ao obter data do pregão da primeira linha de dados (deveria se o índice DHAANYA)")

while line:	# loop de simbolos
	tline = re.match(r'([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)', line)
	if not tline:
		print "PROBLEMAS: linha de dados inválida (não tem 12 campos separados por vírgula):"
		print line
		admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS: linha de dados inválida (não tem 12 campos separados por vírgula)")
	if debug>1:
		print tline.groups()
	simbolo = string.strip(tline.group(2))
		
	# procurar família do símbolo
	familia = db.obtem_familia_programa(debug, programa_id, simbolo)
	if not familia:
		try:
			i = ignorar.index(simbolo)
			print "...Símbolo", simbolo, "não encontrado em FamiliaContratos, mas está na lista de símbolos a ignorar"
		except ValueError, e:
			try:
				i = novos.index(simbolo)
			except ValueError, e:
				novos.append(simbolo)
				print "AVISO: Símbolo", simbolo, "não encontrado em FamiliaContratos, nem na lista de símbolos a ignorar:", line
	else: 
		print "...Símbolo", simbolo, "pertence à família", familia.id, familia.nome.encode('utf-8')
		db.inserir_programa_familia(debug, programa_id, familia)
#		# procurar Ativo com o vencimento
		venc = trata_data(tline.group(3))
		if not venc:
			print "PROBLEMAS: Data de Vencimento inválida:", string.strip(tline.group(1))
			admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS: Data de Vencimento inválida:"+string.strip(tline.group(1)))
		ativo = db.obtem_ativo(debug, familia, venc[0:7])
		if not ativo:
			# ainda não há Ativo com o vencimento, criar!
			print "...Vencimento", venc, "não encontrado, inserir Ativo"
			data_vencimento = venc
			ativo = db.inserir_ativo(debug, familia, venc[0:7], data_vencimento)
			if not ativo:
				print "!!!!!!PROBLEMAS ao criar ativo para vencimento",venc
		if ativo: 
			print "...Vencimento",venc,"Ativo", ativo.id
			# Parsear o resto dos campos
#1=Date, 2=Commodity Symbol, 3=Contract/Expiry Month, 4=Open\(Rs\), 5=High\(Rs\), 6=Low\(Rs\), 7=Close\(Rs\), 8=PCP\(Rs\), 9=Volume\(In Lots\), 10=Volume\(In 000\'s\), 11=Value\(In Lakhs\), 12=OI\(In Lots\)
			price_unit = conv.my_str(string.strip(tline.group()))		
			abertura = conv.my_float(string.strip(tline.group(4)))		
			high = conv.my_float(string.strip(tline.group(5)))		
			low = conv.my_float(string.strip(tline.group(6)))		
			last = conv.my_float(string.strip(tline.group(7)))		
			settle = conv.my_float(string.strip(tline.group(7)))		
			vol_contratos = conv.my_long(string.strip(tline.group(9)))
			negocios = None		
			vol_financeiro = conv.my_float(string.strip(tline.group(11)))		
			open_int = conv.my_long(string.strip(tline.group(12)))

			# corrigir valores
			casas = conv.obtem_casas_decimais(debug, ativo.tick_size)
			if debug>1: print "Tick size:", ativo.tick_size, "Casas decimais:", casas
			if casas is None:
				print "PROBLEMAS no cáculo de casas decimais de", ativo.tick_size, "linha", lin
				admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS:  no cáculo de casas decimais de "+str(ativo.tick_size)+" linha "+str(lin))

			if vol_financeiro: 
				vol_financeiro = vol_financeiro * 100000 # volume vem em lakhs... 1 lakh = 100.000
				vol_financeiro = conv.arredonda_casas(debug, vol_financeiro, casas)
			if vol_contratos and vol_financeiro:
				fator_conv_unidade = conv.fator_conversao_unidade(debug, ativo.unidade_contrato_principal, ativo.unidade_cotacao)
				if fator_conv_unidade:
					fator_conv_moeda = conv.fator_conversao_moeda(debug, 7, ativo.moeda_cotacao)
					if fator_conv_moeda:
						vwap = ( vol_financeiro / vol_contratos / ativo.qtdade_contrato_principal / fator_conv_unidade * fator_conv_moeda ) 
						if debug > 1: print ".... (vol_finan, vol_contr, qty_contrato_prin, fator_conv_unid, fator_conv_moeda) =", vol_financeiro, vol_contratos, ativo.qtdade_contrato_principal, fator_conv_unidade, fator_conv_moeda
						vwap = conv.arredonda_casas(debug, vwap, casas)
					else:
						print "!!!!!! Problemas ao obter fator de conversão de moedas ( 7", ativo.moeda_cotacao, ")"
						vwap = None
				else:
					print "!!!!!! Problemas ao obter fator de conversão de unidades (", ativo.unidade_contrato_principal, ativo.unidade_cotacao, ")"
					vwap = None
			else: vwap = None
# Verificar se unidades batem com as cadastradas no ativo
# Later...

			print "...Settle:", settle,"Volume:", vol_contratos
			if debug > 1:
				print "\tdata:", data
				print "\tsímbolo:", simbolo 
				print "\tvencimento:", venc
				print "\tvolume financeiro:", vol_financeiro
				print "\tcontratos em aberto:", open_int
				print "\tnegócios:", negocios
				print "\tvolume de contratos:", vol_contratos
				print "\tabertura:", abertura
				print "\tmínimo:", low
				print "\tmáximo:", high
				print "\tvwap:", vwap
				print "\túltimo:", last
				print "\tajuste (settle):", settle

			# verificar se já há cotação do ativo para a data na base
			cotacao = db.obtem_cotacao_ativo(debug, ativo, data)
			if not cotacao:
				# inserir cotação
				cotacao = db.inserir_cotacao_ativo(debug, ativo, data, abertura, last, settle, vwap, high, low, negocios, vol_contratos, vol_financeiro, open_int)
				if cotacao: print "......cotação inserida"
				count_i += 1
			else:	# já há cotação nesse dia
				# verificar se mudou...
				if (abertura>0 and cotacao.abertura != abertura) or (last>0 and cotacao.ultimo != last) or (settle>0 and cotacao.fechamento != settle) or (vwap>0 and cotacao.vwap != vwap) or (high>0 and cotacao.maximo != high) or (low>0 and cotacao.minimo != low) or (vol_contratos>0 and cotacao.volume_contratos != vol_contratos) or (vol_financeiro>0 and abs(cotacao.volume_financeiro - vol_financeiro)>ativo.tick_size) or (open_int>0 and cotacao.contratos_aberto != open_int):
					if abertura>0 and cotacao.abertura != abertura: print ".......mudou abertura",cotacao.abertura,abertura
					if last>0 and cotacao.ultimo != last: print ".......mudou ultimo",cotacao.ultimo,last
					if settle>0 and cotacao.fechamento != settle: print ".......mudou fechamento",cotacao.fechamento,settle
					if vwap>0 and cotacao.vwap != vwap: print ".......mudou vwap",cotacao.vwap,vwap
					if high>0 and cotacao.maximo != high: print ".......mudou maximo",cotacao.maximo,high
					if low>0 and cotacao.minimo != low: print ".......mudou minimo",cotacao.minimo,low
					if vol_contratos>0 and cotacao.volume_contratos != vol_contratos: print ".......mudou volume_contratos",cotacao.volume_contratos,vol_contratos
					if vol_financeiro>0 and abs(cotacao.volume_financeiro - vol_financeiro)>ativo.tick_size: print ".......mudou volume_financeiro",cotacao.volume_financeiro,vol_financeiro
					if open_int>0 and cotacao.contratos_aberto != open_int: print ".......mudou contratos_aberto",cotacao.contratos_aberto,open_int
					# mudou, atualizar
					cotacao.abertura = abertura
					cotacao.ultimo = last
					cotacao.fechamento = settle
					cotacao.vwap = vwap
					cotacao.maximo = high
					cotacao.minimo = low
					cotacao.negocios = negocios
					cotacao.volume_contratos = vol_contratos
					cotacao.volume_financeiro = vol_financeiro
					cotacao.contratos_aberto = open_int
					cotacao_nova = db.update_cotacao_ativo(debug, ativo, cotacao)
					if cotacao_nova: print "......cotação atualizada"
					count_u += 1
				else: 
					print "......cotação idêntica já existe na base, ignorando"
					count_p += 1
	line = le_linha(f)

print "FIM"

if len(novos)>0:
        print "Símbolos novos detectados:", novos

admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, None)
