#!/usr/bin/python -u
# -*- coding: utf8 -*-

#
# Copyright 2013 Leandro Dybal Bertoni - All Rights Reserved
#


import sys, re, string, os.path
import db, conv, admin

debug=0
count_i=count_u=count_p=0
data = None
lin = 0 
ignorar = ['GSR']
novos = []

programa = (os.path.basename(sys.argv[0])).replace(".py", "")

if len(sys.argv) < 2:
	print("Uso:", sys.argv[0],"[-v] <arquivo a carregar>")
	sys.exit()
 
if sys.argv[1] == "-v":
	debug = 1
	nome_arq = sys.argv[2]
elif sys.argv[1] == "-vv":
	debug = 2
	nome_arq = sys.argv[2]
elif sys.argv[1] == "-vvv":
	debug = 3
	nome_arq = sys.argv[2]
else: nome_arq = sys.argv[1]


arquivo_log = admin.init(programa)
programa_id = db.obtem_id_programa(debug, programa)
if not programa_id:
	print("PROBLEMAS!!: programa ", programa, " não encontrado na base de dados!")
	# enviar email
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS!!: programa ", programa, " não encontrado na base de dados!");


print("Tratando arquivo",nome_arq)
try: 
	f = open(nome_arq)
except IOError as e:
	print("Não foi possível abrir arquivo",nome_arq,"(",e,")")
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "Não foi possível abrir arquivo"+nome_arq+"("+e+")")


def le_linha(arq):
	global lin
	lin = lin + 1
	linha = re.sub(r'\n$', "", arq.readline())
	if debug: print("("+str(lin)+"):", linha)
	return linha

/*
        FINAL POST-CLEARING PRICES AS OF 06/02/2023 10:32 PM (CDT)
MTH/                       -------  DAILY  ------                                  PT                         -------  PRIOR  DAY  -------
STRIKE            OPEN         HIGH          LOW         LAST         SETT         CHGE  ACTUAL VOL           SETT         VOL         INT

*/


# Verificar linha de cabeçalho 
line = le_linha(f)	
if "PRODUCT SYMBOL,CONTRACT MONTH,CONTRACT YEAR,CONTRACT DAY,CONTRACT,PRODUCT DESCRIPTION,OPEN,HIGH,HIGH AB INDICATOR,LOW,LOW AB INDICATOR,LAST,LAST AB INDICATOR,SETTLE,PT CHG,EST. VOL,PRIOR SETTLE,PRIOR VOL,PRIOR INT,TRADEDATE" not in line:
	print("PROBLEMAS: Arquivo inválido: linha de cabeçalho não encontrada!")
	admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS: Arquivo inválido: linha de cabeçalho não encontrada!")


# Tratar blocos de símbolos (famílias)
line = le_linha(f)
while line: # loop de símbolos/vencimentos
	tline = re.match(r'([^,]+),([^,]+),([^,]+),[^,]*,[^,]*,([^,]*),([^,]*),([^,]*),[^,]*,([^,]*),[^,]*,([^,]*),[^,]*,([^,]*),[^,]*,([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)',line)
	if not tline:
		print("PROBLEMAS: linha de dados inválida (não tem 20 campos separados por vírgula):")
		print(line)
		admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, "PROBLEMAS: linha de dados inválida (não tem 20 campos separados por vírgula)")
	else:
		if debug>1: print("Tupla da linha:", tline.groups())

		simbolo = tline.group(1).strip()
		# procurar família do símbolo
		familia = db.obtem_familia_programa(debug, programa_id, simbolo)
		if not familia:
			try:
				i = ignorar.index(simbolo)
				print("...Símbolo", simbolo, "não encontrado em FamiliaContratos, mas está na lista de símbolos a ignorar")
			except ValueError as e:
				novos.append(simbolo)
				print("AVISO: Símbolo", simbolo, "não encontrado em FamiliaContratos, nem na lista de símbolos a ignorar:", line )
		else:
			print("...Símbolo", simbolo, "pertence à família", familia.id, familia.nome.encode('utf-8'))
			db.inserir_programa_familia(debug, programa_id, familia)
			# Obter vencimento
			venc = (tline.group(3)).strip()+"-"+tline.group(2).strip()
			print("...Vencimento", venc)
			# procurar Ativo
			ativo = db.obtem_ativo(debug, familia, venc)
			if not ativo: 
				# ainda não há ativo com o vencimento, criar!
				print("...Vencimento", venc, "não encontrado, inserir Ativo")
				ativo = db.inserir_ativo(debug, familia, venc, None)
				if not ativo: print("!!!!! PROBLEMAS ao criar ativo, para vencimento", venc)
			if ativo: 
				print("...Vencimento", venc, "Ativo", ativo.id)
				#Parsear o resto dos campos
# 1=PRODUCT SYMBOL, 2=CONTRACT MONTH, 3=CONTRACT YEAR, CONTRACT DAY, CONTRACT, 4=PRODUCT DESCRIPTION, 5=OPEN, 6=HIGH, HIGH AB INDICATOR, 7=LOW, LOW AB INDICATOR, 8=LAST, LAST AB INDICATOR, 9=SETTLE, PT CHG, 10=EST. VOL, 11=PRIOR SETTLE, 12=PRIOR VOL, 13=PRIOR INT, 14=TRADEDATE
				settle = conv.my_float(tline.group(9))
				abertura = conv.my_float(tline.group(5))
				last = conv.my_float(tline.group(8))
				high = conv.my_float(tline.group(6))
				low = conv.my_float(tline.group(7))
				negocios = None
				vol_contratos = conv.my_long(tline.group(10))
				vol_financeiro= None
				open_int = conv.my_long(tline.group(13))
				data = conv.my_str(tline.group(14))[6:10]+"-"+conv.my_str(tline.group(14))[0:2]+"-"+conv.my_str(tline.group(14))[3:5]
				vwap = None

				prev_settle = conv.my_float(tline.group(11))
				prev_vol = conv.my_long(tline.group(12))

				if debug>1:
					print("\tdata:", data)
					print("\tsímbolo:", simbolo)
					print("\tvencimento:", venc)
					print("\tvolume financeiro:", vol_financeiro)
					print("\tcontratos em aberto:", open_int)
					print("\tnegócios:", negocios)
					print("\tvolume de contratos:", vol_contratos)
					print("\tabertura:", abertura)
					print("\tmínimo:", low)
					print("\tmáximo:", high)
					print("\tvwap:", vwap)
					print("\túltimo:", last)
					print("\tajuste (settle):", settle)
					print("\tprev_settle:", prev_settle)
					print("\tprev_vol:", prev_vol)

				# verificar se há cotação do ativo para a data 
				cotacao = db.obtem_cotacao_ativo(debug, ativo, data)
				if not cotacao:
					# inserir cotação
					cotacao = db.inserir_cotacao_ativo(debug, ativo, data, abertura, last, settle, vwap, high, low, negocios, vol_contratos, vol_financeiro, open_int)
					if cotacao: print("......cotação inserida")
					count_i += 1
				else: 	# já há cotação nesse dia
					# verificar se mudou...
					if (abertura and abertura>0 and cotacao.abertura != abertura) or (last and last>0 and cotacao.ultimo != last) or (settle and settle>0 and cotacao.fechamento != settle) or (vwap and vwap>0 and cotacao.vwap != vwap) or (high and high>0 and cotacao.maximo != high) or (low and low>0 and cotacao.minimo != low) or (negocios and negocios>0 and cotacao.negocios != negocios) or (vol_contratos and vol_contratos>0 and cotacao.volume_contratos != vol_contratos) or (vol_financeiro and vol_financeiro>0 and cotacao.volume_financeiro != vol_financeiro) or (open_int and open_int>0 and cotacao.contratos_aberto != open_int):
						if abertura>0 and cotacao.abertura != abertura: print(".......mudou abertura",(cotacao.abertura,abertura))
						if last>0 and cotacao.ultimo != last: print(".......mudou ultimo",(cotacao.ultimo,last))
						if settle>0 and cotacao.fechamento != settle: print(".......mudou fechamento",(cotacao.fechamento,settle))
						if cotacao.vwap != None: print(".......mudou vwap",(cotacao.vwap,vwap))
						if high>0 and cotacao.maximo != high: print(".......mudou maximo",(cotacao.maximo,high))
						if low>0 and cotacao.minimo != low: print(".......mudou minimo",(cotacao.minimo,low))
						if cotacao.negocios != None: print(".......mudou negocios",(cotacao.negocios,negocios))
						if vol_contratos>0 and cotacao.volume_contratos != vol_contratos: print(".......mudou volume_contratos",(cotacao.volume_contratos,vol_contratos))
						if cotacao.volume_financeiro != None: print(".......mudou volume_financeiro",(cotacao.volume_financeiro,vol_financeiro))
						if open_int>0 and cotacao.contratos_aberto != open_int: print(".......mudou contratos_aberto",(cotacao.contratos_aberto,open_int))
						# mudou, atualizar cotação
						cotacao.abertura = abertura
						cotacao.ultimo = last
						cotacao.fechamento = settle
						cotacao.vwap = vwap
						cotacao.maximo = high
						cotacao.minimo = low
						cotacao.negocios = negocios
						cotacao.volume_contratos = vol_contratos
						cotacao.volume_financeiro = vol_financeiro
						cotacao.contratos_aberto = open_int
						cotacao_nova = db.update_cotacao_ativo(debug, ativo, cotacao)
						if cotacao_nova: print("......cotação atualizada")
						count_u += 1
					else: 
						print("......cotação idêntica já existe na base, ignorando")
						count_p += 1
				# verificar cotação da véspera
				i = -1
				cotacao_vespera = None
				while not cotacao_vespera and i >= -3: # voltar até 3 dias de semana
					data_vespera = conv.shift_data_dias_uteis(debug, data, i)
					cotacao_vespera = db.obtem_cotacao_ativo(debug, ativo, data_vespera)
					i = i - 1
				if cotacao_vespera:
					# verificar fechamento, volume e open interest
					if cotacao_vespera.fechamento != prev_settle or cotacao_vespera.volume_contratos != prev_vol or cotacao_vespera.contratos_aberto != open_int:
						if prev_settle and prev_settle>0 and cotacao_vespera.fechamento != prev_settle: print(".......mudou fechamento da véspera",(cotacao_vespera.fechamento,prev_settle))
						if prev_vol and prev_vol>0 and cotacao_vespera.volume_contratos != prev_vol: print(".......mudou volume da véspera",(cotacao_vespera.volume_contratos,prev_vol))
						if open_int and open_int>0 and cotacao_vespera.contratos_aberto != open_int: print(".......mudou contratos em aberto da véspera",(cotacao_vespera.contratos_aberto,open_int))
						cotacao_vespera.fechamento = prev_settle
						cotacao_vespera.volume_contratos = prev_vol
						cotacao_vespera.contratos_aberto = open_int
						cotacao_vespera_atualizada = db.update_cotacao_ativo(debug, ativo, cotacao_vespera)
						if cotacao_vespera_atualizada: print("......cotação da véspera atualizada")
				else: print(".....Cotação não encontrada para a véspera")

	line = le_linha(f)

if len(novos)>0:
	print("Símbolos novos detectados:", novos)

admin.sair(debug, programa_id, nome_arq, arquivo_log, data, count_i, count_u, count_p, None)
